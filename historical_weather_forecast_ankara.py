# -*- coding: utf-8 -*-
"""ankara

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gj1_MuhR-IDUXra0Gbr0XkAy_fX3hrUD
"""



# Import libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
import joblib

def train_model():
    # Read data sets
    ds_1 = pd.read_csv('data/ankara1.csv')
    ds_2 = pd.read_csv('data/ankara2.csv')
    ds_3 = pd.read_csv('data/ankara3.csv')
    ds_4 = pd.read_csv('data/ankara4.csv')

    # Concatenate data sets
    ds = pd.concat([ds_4, ds_3, ds_2, ds_1])
    df = pd.DataFrame(ds)

    # Drup unnecessary columns
    columns_to_drop = ['name', 'preciptype', 'description', 'conditions', 'stations', 'severerisk', 'windgust', 'sunrise', 'sunset']
    df = df.drop(columns_to_drop, axis=1)

    # Convert temperature from Fahrenheit to Celsius
    def fahrenheit_to_celsius(temp):
        return (temp - 32) / 1.8

    def convert_temp_column(df, column_name):
        df[column_name] = df[column_name].apply(fahrenheit_to_celsius)
        return df

    df = convert_temp_column(df, 'tempmax')
    df = convert_temp_column(df, 'tempmin')
    df = convert_temp_column(df, 'temp')
    df = convert_temp_column(df, 'feelslikemax')
    df = convert_temp_column(df, 'feelslikemin')
    df = convert_temp_column(df, 'feelslike')

    # Delete fog and wind data
    df = df[df['icon'] != 'fog']
    df = df[df['icon'] != 'wind']

    # Define a mapping dictionary for weather conditions
    weather_mapping = {'rain': 0, 'partly-cloudy-day': 1, 'cloudy': 2, 'clear-day': 3, 'snow': 4}
    df['icon'] = df['icon'].map(weather_mapping)

    # Drop the 'datetime' column
    df = df.drop('datetime', axis=1)

    # Split the data
    x = df.drop('icon', axis=1)
    y = df['icon']
    X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=0)

    # Train the model
    model = GaussianNB()
    model.fit(X_train, y_train)

    # Evaluate the model
    y_pred = model.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    print(f"Accuracy: {accuracy:.2f}")
    conf_matrix = confusion_matrix(y_test, y_pred)
    classification_rep = classification_report(y_test, y_pred, zero_division=1)
    print("Confusion Matrix:")
    print(conf_matrix)
    print("Classification Report:")
    print(classification_rep)

    # Calculate mean values for the relevant columns
    mean_values = df.mean().to_dict()

    # Save the model and mean values
    joblib.dump(model, 'weather_model.pkl')
    joblib.dump(mean_values, 'mean_values.pkl')
def predict_weather(tempmax, tempmin, temp, feelslikemax, feelslikemin, feelslike, dew, humidity, precip, precipprob, precipcover, snow, snowdepth, windspeed, winddir, sealevelpressure, cloudcover, visibility, solarradiation, solarenergy, uvindex, moonphase):
    # Load the trained model and mean values
    model = joblib.load('weather_model.pkl')
    mean_values = joblib.load('mean_values.pkl')

    # List of input parameters
    params = [tempmax, tempmin, temp, feelslikemax, feelslikemin, feelslike, dew, humidity, precip, precipprob, precipcover, snow, snowdepth, windspeed, winddir, sealevelpressure, cloudcover, visibility, solarradiation, solarenergy, uvindex, moonphase]

    # Corresponding keys for mean values
    keys = ["tempmax", "tempmin", "temp", "feelslikemax", "feelslikemin", "feelslike", "dew", "humidity", "precip", "precipprob", "precipcover", "snow", "snowdepth", "windspeed", "winddir", "sealevelpressure", "cloudcover", "visibility", "solarradiation", "solarenergy", "uvindex", "moonphase"]

    # Replace '-' with mean values
    for i, param in enumerate(params):
        if param == '-':
            params[i] = mean_values[keys[i]]

    # Convert to numpy array
    user_input = np.array([params], dtype=float)

    # Predict weather using the model
    predicted_weather_code = model.predict(user_input)[0]

    # Map prediction code back to weather type
    weather_mapping = {0: "rain", 1: "partly-cloudy-day", 2: "cloudy", 3: "clear-day", 4: "snow"}  # mapping
    predicted_weather = weather_mapping.get(predicted_weather_code, "Unknown")

    return predicted_weather

#training model
# train_model()



